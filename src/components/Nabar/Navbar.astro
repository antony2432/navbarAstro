---
import "./navbar.css";
import { NavigationProps } from './navigation.props'

const urlItems: NavigationProps[] = [
  {
    name: "Inicio",
    path: "/",
  },
  {
    name: "Sobre mi",
    path: "/about",
  },
  {
    name: "Proyectos",
    path: "/proyects",
    children: [
      {
        name: "Front-end",
        path: "/proyects/front-end",
      },
      {
        name: "Back-end",
        path: "/proyects/back-end",
      },
    ],
  },
  {
    name: "Contacto",
    path: "/contacto",
  },
];
---

<header>
  <div class="header" id="header">
    <section class="logo-section">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        fill="currentColor"
        class="logo-section-svg"
        viewBox="0 0 16 16"
      >
        <path
          d="M2.114 8.063V7.9c1.005-.102 1.497-.615 1.497-1.6V4.503c0-1.094.39-1.538 1.354-1.538h.273V2h-.376C3.25 2 2.49 2.759 2.49 4.352v1.524c0 1.094-.376 1.456-1.49 1.456v1.299c1.114 0 1.49.362 1.49 1.456v1.524c0 1.593.759 2.352 2.372 2.352h.376v-.964h-.273c-.964 0-1.354-.444-1.354-1.538V9.663c0-.984-.492-1.497-1.497-1.6zM13.886 7.9v.163c-1.005.103-1.497.616-1.497 1.6v1.798c0 1.094-.39 1.538-1.354 1.538h-.273v.964h.376c1.613 0 2.372-.759 2.372-2.352v-1.524c0-1.094.376-1.456 1.49-1.456V7.332c-1.114 0-1.49-.362-1.49-1.456V4.352C13.51 2.759 12.75 2 11.138 2h-.376v.964h.273c.964 0 1.354.444 1.354 1.538V6.3c0 .984.492 1.497 1.497 1.6"
        ></path>
      </svg>
      <h1 class="header-title">Antony CH</h1>
    </section>
    <button type="button" class="header-button" id="button-hamburger">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        fill="currentColor"
        class="header-button-svg"
        viewBox="0 0 16 16"
      >
        <path
          fill-rule="evenodd"
          d="M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z"
        ></path>
      </svg>
    </button>
    <nav class="navigation" id="navigation">
      <ul class="navigation-list" id="navigation-list">
        {
          urlItems.map(({ name, path, children }) =>
            children ? (
              <li class="list-item children">
                <span class="ancor">Services</span>
                <button type="button" class="child-button" id="sub-button">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    class="down"
                    viewBox="0 0 16 16"
                  >
                    <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
                  </svg>
                </button>
                <button
                  type="button"
                  class="child-button view"
                  id="sub-button2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    class="down"
                    viewBox="0 0 16 16"
                  >
                    <path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z" />
                  </svg>
                </button>
                <nav class="navigation-children" id="navigation-children">
                  <ul
                    class="navigation-list-children"
                    id="navigation-list-children"
                  >
                    {children.map((chi) => (
                      <li class="list-item-children">
                        <a href={chi.path} class="ancor">
                          {chi.name}
                        </a>
                      </li>
                    ))}
                  </ul>
                </nav>
                <hr />
              </li>
            ) : (
              <li class="list-item">
                <a href={path} class="ancor">
                  {name}
                </a>
                <hr />
              </li>
            )
          )
        }
      </ul>
    </nav>
  </div>
</header>

<script>
  import { atom } from "nanostores";
  // state declaracion
  const isOpen = atom(false);
  const subIsOpen = atom(false);
  const isOpenView = atom(false);
  // declaration of html elements
  const navigation = document.getElementById("navigation");
  const button_hamburger = document.getElementById("button-hamburger");
  const itemsList = document.getElementById("navigation-list")?.offsetHeight;
  const sub_button = document.getElementById("sub-button");
  const navigation_children = document.getElementById("navigation-children");
  const navigation_list_children = document.getElementById(
    "navigation-list-children"
  );
  const sub_button2 = document.getElementById("sub-button2");
  const header = document.getElementById("header");
  // margin declaration
  const margin_general = "2rem";

  button_hamburger?.addEventListener("click", () => {
    isOpen.set(!isOpen.get());
    if (isOpen.get()) {
      navigation
        ? (navigation.style.height = `calc(${itemsList}px + ${margin_general})`)
        : null;
    } else {
      navigation_children ? (navigation_children.style.height = `0`) : null;
      navigation ? (navigation.style.height = "0") : null;
      subIsOpen.set(false);
    }
  });

  sub_button?.addEventListener("click", () => {
    subIsOpen.set(!subIsOpen.get());
    if (subIsOpen.get()) {
      navigation_children
        ? (navigation_children.style.height = `calc(${navigation_list_children?.offsetHeight}px + ${margin_general})`)
        : null;
      navigation
        ? (navigation.style.height = `calc(${itemsList}px + ${margin_general} + ${navigation_list_children?.offsetHeight}px + ${margin_general})`)
        : null;
    } else {
      navigation_children ? (navigation_children.style.height = `0`) : null;
      navigation
        ? (navigation.style.height = `calc(${itemsList}px + ${margin_general})`)
        : null;
    }
  });

  sub_button2?.addEventListener("click", () => {
    isOpenView.set(!isOpenView.get());
    if (isOpenView.get()) {
      navigation_children ? (navigation_children.style.display = "flex") : null;
      header ? (header.style.overflow = "visible") : null;
      navigation_children
        ? (navigation_children.style.height = `calc(${navigation_list_children?.offsetHeight}px + ${margin_general})`)
        : null;
    } else {
      navigation_children ? (navigation_children.style.height = `0`) : null;
      setTimeout(() => {
        header ? (header.style.overflow = "hidden") : null;
      }, 600);
      setTimeout(() => {
        navigation_children
          ? (navigation_children.style.display = "none")
          : null;
      }, 300);
    }
  });
</script>
